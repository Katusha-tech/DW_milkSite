# –û–ø–∏—à–µ–º —Å–∏–≥–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–ª—É—à–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –º–æ–¥–µ–ª—å Review 
# –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –µ—Å—Ç—å –ª–∏ –≤ –ø–æ–ª–µ text —Å–ª–æ–≤–∞ "–ø–ª–æ—Ö–æ" –∏–ª–∏ "—É–∂–∞—Å–Ω–æ" - –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –º–µ–Ω—è–µ–º is_published –Ω–∞ True
from .models import Order, Review, OrderItem
from django.db.models.signals import post_save, m2m_changed
from django.dispatch import receiver
from .mistral import is_bad_review
from .telegram_bot import send_telegram_message
from asyncio import run
from telegram.error import BadRequest
from asgiref.sync import async_to_sync
# –ò–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–º —Ç–æ–∫–µ–Ω –∏ id —á–∞—Ç–∞ 
from django.conf import settings

TELEGRAM_BOT_API_KEY = settings.TELEGRAM_BOT_API_KEY
TELEGRAM_USER_ID = settings.TELEGRAM_USER_ID


@receiver(post_save, sender=Review)
def check_review_text(sender, instance, created, **kwargs):
    """ 
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤ '–ø–ª–æ—Ö–æ' –∏–ª–∏ '—É–∂–∞—Å–Ω–æ'. 
    –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —Å–ª–æ–≤ –Ω–µ—Ç, —Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_published = True
    """
    if created:
        if not is_bad_review(instance.text):
            instance.is_published = True
            instance.save()
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
            message = f"""
üéâ*–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞!*üéâ

üë§*–ò–º—è:* {instance.client_name}
üí¨*–¢–µ–∫—Å—Ç:* {instance.text}
‚≠ê*–û—Ü–µ–Ω–∫–∞:* {instance.rating}

üîó*–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–∑—ã–≤:* http://127.0.0.1:8000/admin/core/review/{instance.id}/change/

#–æ—Ç–∑—ã–≤
=================
"""
            run(send_telegram_message(TELEGRAM_BOT_API_KEY, TELEGRAM_USER_ID, message))

        else:
            instance.is_published = False
            instance.save()
            # –í—ã–≤–æ–¥  –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
            print(f"–û—Ç–∑—ã–≤ {instance.client_name} –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤.")



@receiver(post_save, sender=Order)
def telegram_order_notification(sender, instance, created, **kwargs):
    """ 
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ 
    """
    if created:
        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –¥–æ–±—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        client_name = instance.client_name
        phone = instance.phone
        comment = instance.comment

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        telegram_message = f"""üìû*–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {client_name}!*üìû

*–¢–µ–ª–µ—Ñ–æ–Ω:* `{phone}`
*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}
*–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑:* http://127.0.0.1:8000/admin/core/order/{instance.id}/change/
====================
"""
        # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

        run(send_telegram_message(TELEGRAM_BOT_API_KEY, TELEGRAM_USER_ID, telegram_message))



@receiver(post_save, sender=OrderItem)
def send_telegram_notification_on_orderitem_create(sender, instance, created, **kwargs):
    if created:
        order = instance.order
        products = order.items.select_related("product")
        products_list = [f"{item.product.name} √ó {item.quantity}" for item in products]
        products_text = "\n".join(products_list) if products_list else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"

        message = f"""ü•õ *–ù–û–í–´–ô –ó–ê–ö–ê–ó!* ü•õ

üë§ *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:* {order.client_name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{order.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}`
üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* _{order.comment or '–ù–µ —É–∫–∞–∑–∞–Ω'}_
üì¶ *–ü—Ä–æ–¥—É–∫—Ç—ã:* 
{products_text}
üóìÔ∏è *–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:* {order.appointment_date.strftime('%d.%m.%Y') if order.appointment_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üìÖ *–î–µ–Ω—å –ø—Ä–∏–≤–æ–∑–∞:* {getattr(order, 'delivery_day', '–ù–µ —É–∫–∞–∑–∞–Ω')}

üîó *–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑:* http://127.0.0.1:8000/admin/core/order/{order.id}/change/

#–Ω–æ–≤—ã–π–∑–∞–∫–∞–∑ #–º–æ–ª–æ—á–∫–∞
====================
"""
        async_to_sync(send_telegram_message)(
            TELEGRAM_BOT_API_KEY,
            TELEGRAM_USER_ID,
            message
        )