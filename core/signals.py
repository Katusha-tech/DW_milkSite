import threading
from asyncio import run
from django.db.models.signals import post_save, m2m_changed
from django.dispatch import receiver
from django.conf import settings
from .models import Order, Review
from .mistral import is_bad_review
from .telegram_bot import send_telegram_message

TELEGRAM_BOT_API_KEY = settings.TELEGRAM_BOT_API_KEY
TELEGRAM_USER_ID = settings.TELEGRAM_USER_ID


# ======== –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram =========
def send_telegram_async(message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–π—Ç."""
    def _send():
        try:
            run(send_telegram_message(
                TELEGRAM_BOT_API_KEY,
                TELEGRAM_USER_ID,
                message
            ))
        except Exception as e:
            print(f"[Telegram ERROR] {e}")

    threading.Thread(target=_send).start()


# ======== –û—Ç–∑—ã–≤—ã =========
@receiver(post_save, sender=Review)
def check_review_text(sender, instance, created, **kwargs):
    """
    –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç.
    –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤ ‚Äî –ø—É–±–ª–∏–∫—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram.
    """
    if not created:
        return

    if not is_bad_review(instance.text):
        instance.is_published = True
        instance.save(update_fields=["is_published"])

        message = f"""
üéâ*–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞!*üéâ

üë§*–ò–º—è:* {instance.client_name}
üí¨*–¢–µ–∫—Å—Ç:* {instance.text}
‚≠ê*–û—Ü–µ–Ω–∫–∞:* {instance.rating}

üîó*–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–∑—ã–≤:* http://127.0.0.1:8000/admin/core/review/{instance.id}/change/

#–æ—Ç–∑—ã–≤
=================
"""
        send_telegram_async(message)

    else:
        instance.is_published = False
        instance.save(update_fields=["is_published"])
        print(f"–û—Ç–∑—ã–≤ {instance.client_name} –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤.")


# ======== –ó–∞–∫–∞–∑—ã =========
@receiver(m2m_changed, sender=Order.products.through)
def send_telegram_notification(sender, instance, action, **kwargs):
    """
    –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram.
    """
    if action == 'post_add' and kwargs.get('pk_set'):
        products = [product.name for product in instance.products.all()]

        message = f"""ü•õ *–ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨ –ù–ê –£–°–õ–£–ì–£!* ü•õ

üë§*–ò–º—è:* {instance.client_name}
üìû*–¢–µ–ª–µ—Ñ–æ–Ω:* `{instance.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}`  
üí¨*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* _{instance.comment or '–ù–µ —É–∫–∞–∑–∞–Ω'}_  
üì¶*–ü—Ä–æ–¥—É–∫—Ç—ã:* {', '.join(products) or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}  
üóìÔ∏è *–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* {instance.date_created.strftime('%d.%m.%Y %H:%M') if instance.date_created else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}  
üìÖ*–ñ–µ–ª–∞–µ–º—ã–π –¥–µ–Ω—å:* {instance.delivery_day or '–ù–µ —É–∫–∞–∑–∞–Ω'}  

üîó*–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å:* http://127.0.0.1:8000/admin/core/order/{instance.id}/change/
        
#–Ω–æ–≤—ã–π–∑–∞–∫–∞–∑
====================
"""
        send_telegram_async(message)
